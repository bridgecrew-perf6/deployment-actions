on:
  workflow_call:
    inputs:
      deployment_id:
        required: false
        type: number
      environment:
        required: true
        type: string
      env_vars:
        required: false
        type: string
      region:
        required: true
        type: string
      role_arn:
        required: true
        type: string
      stacks:
        required: false
        type: string
      task:
        required: true
        type: string

jobs:
  handler:
    concurrency: ${{ inputs.environment }}
    environment: ${{ inputs.deployment_id == '' && inputs.environment || null }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      deployments: write
      id-token: write
    steps:
      - uses: actions/checkout@v3
      - id: detect-package-manager
        run: |
          if [ -f yarn.lock ]; then
            echo '::set-output name=cache-type::yarn'
            echo '::set-output name=dependency-command::yarn'
          else
            echo '::set-output name=cache-type::npm'
            echo '::set-output name=dependency-command::"npm ci"'
          fi
      - uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: ${{ steps.detect-package-manager.outputs.cache-type }}
      - name: Assume AWS role
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: ${{ inputs.region }}
          role-to-assume: ${{ inputs.role_arn }}
      - name: Install dependencies
        run: ${{ steps.detect-package-manager.outputs.dependency-command }}
      - name: Run CDK command
        id: cdk
        env:
          ENVIRONMENT: ${{ inputs.environment }}
          ENV_VARS: ${{ inputs.env_vars }}
          STACKS: ${{ inputs.stacks }}
          TASK: ${{ inputs.task }}
        run: ./.github/scripts/run-cdk-command.sh
      - name: Upload outputs artifact
        uses: actions/upload-artifact@v3
        if: inputs.task == 'deploy'
        with:
          name: cdk.out.json
          path: cdk.out.json
      - name: Update deployment status (deploy)
        if: always() && inputs.task == 'deploy' && inputs.deployment_id != ''
        uses: chrnorm/deployment-status@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          environment-url: ${{ steps.cdk.outputs.url }}
          state: ${{ job.status }}
          deployment-id: ${{ inputs.deployment_id }}
      - name: Update deployment status (destroy)
        uses: strumwolf/delete-deployment-environment@v2
        if: always() && inputs.task == 'destroy'
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          environment: ${{ inputs.environment }}
          onlyRemoveDeployments: true
