name: Deployment handler

on:
  workflow_call:
    inputs:
      cdk-config-path:
        required: false
        type: string
      cdk-role-arn:
        required: false
        type: string
      codeartifact-domain:
        required: false
        type: string
      codeartifact-domain-owner:
        required: false
        type: string
      codeartifact-namespace:
        required: false
        type: string
      codeartifact-region:
        required: false
        type: string
      codeartifact-repository:
        required: false
        type: string
      codeartifact-role-arn:
        required: false
        type: string
      cluster:
        required: false
        type: string
      deployment-id:
        required: false
        type: string
      deployment-target-name:
        required: true
        type: string
      dockerfile-path:
        required: false
        type: string
      ecr-account-id:
        required: false
        type: string
      ecr-region:
        required: false
        type: string
      ecr-role-arn:
        required: false
        type: string
      eks-role-arn:
        required: false
        type: string
      environment:
        required: true
        type: string
      event-type:
        required: true
        type: string
      extra-helm-values:
        required: false
        type: string
      helm-chart-path:
        required: false
        type: string
      namespace:
        required: true
        type: string
      region:
        required: true
        type: string
      stacks:
        required: false
        type: string
      task:
        required: true
        type: string
    secrets:
      ecr-lifecycle-policy:
        required: false
      ecr-repo-policy:
        required: false
      twingate-service-key:
        required: false

jobs:
  cdk-deploy:
    concurrency: cdk-${{ inputs.environment }}
    if: inputs.cdk-config-path != ''
    permissions:
      contents: read
      id-token: write
    runs-on: ubuntu-latest
    steps:
    - uses: riskalyze/deployment-actions/cdk-deploy@v2
      id: cdk-deploy
      with:
        codeartifact-domain: ${{ inputs.codeartifact-domain }}
        codeartifact-domain-owner: ${{ inputs.codeartifact-domain-owner }}
        codeartifact-namespace: ${{ inputs.codeartifact-namespace }}
        codeartifact-region: ${{ inputs.codeartifact-region }}
        codeartifact-repository: ${{ inputs.codeartifact-repository }}
        codeartifact-role-arn: ${{ inputs.codeartifact-role-arn }}
        env-vars: ACCOUNT_NAME=${{ inputs.deployment-target-name }},NAMESPACE=${{ inputs.namespace }}
        environment: ${{ inputs.environment }}
        cdk-region: ${{ inputs.region }}
        cdk-role-arn: ${{ inputs.cdk-role-arn }}
        path: ${{ inputs.cdk-config-path }}
        task: ${{ inputs.task }}

  ecr-build-push:
    if: inputs.dockerfile-path != '' && inputs.task == 'deploy'
    concurrency: ${{ github.sha }}
    permissions:
      contents: read
      id-token: write
    runs-on: ubuntu-latest
    steps:
      - uses: riskalyze/deployment-actions/ecr-build-push@v2
        with:
          codeartifact-domain: ${{ inputs.codeartifact-domain }}
          codeartifact-domain-owner: ${{ inputs.codeartifact-domain-owner }}
          codeartifact-namespace: ${{ inputs.codeartifact-namespace }}
          codeartifact-region: ${{ inputs.codeartifact-region }}
          codeartifact-repository: ${{ inputs.codeartifact-repository }}
          ecr-region: ${{ inputs.ecr-region }}
          ecr-lifecycle-policy: ${{ secrets.ecr-lifecycle-policy }}
          ecr-repo-policy: ${{ secrets.ecr-repo-policy }}
          ecr-role-arn: ${{ inputs.ecr-role-arn }}
          path: ${{ inputs.dockerfile-path }}

  helm-package:
    if: inputs.helm-chart-path != '' && inputs.task == 'deploy'
    permissions:
      contents: read
      id-token: write
    runs-on: ubuntu-latest
    steps:
    - uses: riskalyze/deployment-actions/helm-package@v2
      with:
        ecr-account-id: ${{ inputs.ecr-account-id }}
        ecr-region: ${{ inputs.ecr-region }}
        ecr-role-arn: ${{ inputs.ecr-role-arn }}
        path: ${{ inputs.helm-chart-path }}

  eks-helm-deploy:
    # We have to use the ugly conditional below because we want this step to run on destroy,
    # even though the helm-package step gets skipped.
    if: |
      always() &&
      inputs.helm-chart-path != '' &&
      (needs.ecr-build-push.result == 'success' || needs.ecr-build-push.result == 'skipped') &&
      (needs.helm-package.result == 'success' || needs.helm-package.result == 'skipped')
    concurrency: eks-helm-${{ inputs.environment }}
    needs:
    - ecr-build-push
    - helm-package
    permissions:
      contents: read
      id-token: write
    runs-on: ubuntu-latest
    steps:
    - uses: riskalyze/deployment-actions/eks-helm-deploy@v2
      with:
        cluster: ${{ inputs.cluster }}
        environment: ${{ inputs.deployment-target-name }}
        event-type: ${{ inputs.event-type }}
        extra-values: ${{ inputs.extra-helm-values }}
        namespace: ${{ inputs.namespace }}
        path: ${{ inputs.helm-chart-path }}
        region: ${{ inputs.region }}
        role-arn: ${{ inputs.eks-role-arn }}
        task: ${{ inputs.task }}
        twingate-service-key: ${{ secrets.twingate-service-key }}

  update-deployment:
    needs:
    - cdk-deploy
    - eks-helm-deploy
    if: always()
    runs-on: ubuntu-latest
    permissions:
      deployments: write
    steps:
    - id: context
      run: |
        repo=${{ github.repository }}
        echo "::set-output name=repo::${repo/*\//}"
        if [[ ${{ needs.cdk-deploy.result }} == 'skipped' ]] || [[ ${{ needs.cdk-deploy.result }} == 'success' ]]; then
          if [[ ${{ needs.eks-helm-deploy.result }} == 'skipped' ]] || [[ ${{ needs.eks-helm-deploy.result }} == 'success' ]]; then
            echo "::set-output name=state::success"
            exit 0
          fi
        fi
        echo "::set-output name=state::failure"
    - name: Update deployment status (deploy)
      if: inputs.task == 'deploy' && inputs.deployment-id != ''
      uses: chrnorm/deployment-status@v2
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        environment-url: https://${{ inputs.namespace }}-${{ steps.context.outputs.repo }}.riskalyze-${{ inputs.deployment-target-name }}-us.com/
        state: ${{ steps.context.outputs.state }}
        deployment-id: ${{ inputs.deployment-id }}
    - name: Update deployment status (destroy)
      uses: strumwolf/delete-deployment-environment@v2
      if: inputs.task == 'destroy'
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        environment: ${{ inputs.environment }}
        onlyRemoveDeployments: true
    # TODO: Send notification on failed destroys?
