on:
  workflow_call:
    inputs:
      deployment_id:
        required: false
        type: number
      environment:
        required: true
        type: string
      env_vars:
        required: false
        type: string
      region:
        required: true
        type: string
      role_arn:
        required: true
        type: string
      stacks:
        required: false
        type: string
      task:
        required: true
        type: string

jobs:
  handler:
    environment: ${{ inputs.environment }}
    concurrency: ${{ inputs.environment }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      deployments: write
      id-token: write
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: yarn
      - name: Assume AWS role
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: ${{ inputs.region }}
          role-to-assume: ${{ inputs.role_arn }}
      - name: Install dependencies
        run: yarn
      - name: CDK
        id: cdk
        env:
          ENVIRONMENT: ${{ inputs.environment }}
          ENV_VARS: ${{ inputs.env_vars }}
          STACKS: ${{ inputs.stacks }}
          TASK: ${{ inputs.task }}
        run: |
          set -ueo pipefail
          if [ "$ENV_VARS" != "" ]; then
            IFS=','
            read -r -a vars <<< "$ENV_VARS"
            for val in "${vars[@]}"; do
              printf "%s\n" "$val"
              export "$val"
            done
          fi
          if [ "$STACKS" != "" ]; then
              stack_arg=$STACKS
            else
              stack_arg="--all"
            fi
          if [ "$TASK" == "deploy" ]; then
            echo "Running cdk deploy..."
            ./node_modules/.bin/cdk deploy --progress events --require-approval never --outputs-file cdk.out.json $stack_arg
            url=$(jq -r '.[].url' cdk.out.json)
            if [ "$url" != "null" ]; then
              echo "::set-output name=url::$url"
            fi
          elif [ "$TASK" == "destroy" ]; then
            if [[ "$ENVIRONMENT" =~ ^prod ]]; then
              echo "ERROR! Cannot destroy a production environment!!"
              exit 1
            else
              echo "Running cdk destroy..."
              ./node_modules/.bin/cdk destroy --progress events --force $stack_arg
            fi
          else
            echo "ERROR! Unrecognized action $TASK."
          fi
      - name: Upload outputs artifact
        uses: actions/upload-artifact@v3
        if: inputs.task == 'deploy'
        with:
          name: cdk.out.json
          path: cdk.out.json
      - name: Update deployment status (deploy)
        uses: bobheadxi/deployments@v1.2.0
        if: always() && inputs.task == 'deploy' && inputs.deployment_id != ''
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          step: finish
          status: ${{ job.status }}
          env: ${{ inputs.environment }}
          env_url: ${{ steps.cdk.outputs.url }}
          deployment_id: ${{ inputs.deployment_id }}
      - name: Update deployment status (destroy)
        uses: strumwolf/delete-deployment-environment@v2
        if: always() && inputs.task == 'destroy'
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          environment: ${{ inputs.environment }}
          onlyRemoveDeployments: true
