on:
  workflow_call:
    inputs:
      account:
        type: string
        required: true
      action:
        type: string
        required: true
      aws_region:
        type: string
        required: true
      aws_role_arn:
        type: string
        required: true
      namespace:
        type: string
        required: true
      stacks:
        type: string
        required: false

jobs:
  deploy:
    if: ${{ inputs.action == "deploy" }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: yarn
      - name: Set environment
        id: environment
        env:
          account: ${{ inputs.account }}
          namespace: ${{ inputs.namespace }}
        run: |
          if [ $account =~ ^(prod|failover|stage) ]; then
            echo "::set-output name=environment::$account"
          else
            echo "::set-output name=environment::$account-$namespace"
          fi
      - name: Create deployment
        uses: bobheadxi/deployments@v1
        id: create-deployment
        with:
          step: start
          token: ${{ secrets.GITHUB_TOKEN }}
          env: ${{ steps.environment.outputs.environment }}
      - name: Assume AWS role
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: ${{ inputs.aws_region }}
          role-to-assume: ${{ inputs.aws_role_arn }}
      - name: Install dependencies
        run: yarn
      - name: CDK deploy
        id: cdk-deploy
        env:
          ACCOUNT: ${{ inputs.account }}
          NAMESPACE: ${{ inputs.namespace }}
        run: |- # TODO: Parse stacks and use it here
          ./node_modules/.bin/cdk deploy --progress events --require-approval never --outputs-file cdk.out.json
          echo "::set-output name=url::$(jq -r '.[].url' cdk.out.json)"
      - name: Update deployment status
        uses: bobheadxi/deployments@v1.2.0
        if: always()
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          step: finish
          status: ${{ job.status }}
          env: ${{ steps.environment.outputs.environment }}
          env_url: ${{ steps.cdk-deploy.outputs.url }}
          deployment_id: ${{ steps.create-deployment.outputs.deployment_id }}